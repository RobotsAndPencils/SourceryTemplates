{% for argument in argument.imports %}
import {{ argument }}
{% endfor %}
{% if argument.app %}@testable import {{ argument.app }}{% endif %}

{% for type in types.protocols %}
{% if type.annotations.AutoMockable %}
public class {{ type.name }}Mock: {% if type.annotations.MockBaseClass %}{{ type.annotations.MockBaseClass }}, {% endif %}{{ type.name }} {

    {% for variable in type.allVariables|!annotated:"NoMock" %}
    public var {{ variable.name }}SetCount = 0
    public var {{ variable.name }}: {{ variable.typeName }}{% if not variable.isOptional %}{% if variable.isArray %} = []{% endif %}{% if variable.isDictionary %} = [:]{% endif %}{% if variable|annotated:"DefaultMockValue" %} = {{ variable.annotations.DefaultMockValue }}{% endif %}{% endif %} {
        didSet { {{ variable.name }}SetCount += 1 }
    }
    {% endfor %}

    {% if type.allVariables.count > 0 %}
    public init({% for variable in type.allVariables %}{{ variable.name }}: {{ variable.typeName }}{% if variable|annotated:"DefaultMockValue" %} = {{ variable.annotations.DefaultMockValue }}{% else %}{% if variable.isOptional %} = nil{% else %}{% if variable.isArray %} = []{% endif %}{% endif %}{% endif %}{% if not forloop.last %}, {% endif %}{% endfor %}) {
        {% for variable in type.allVariables %}self.{{ variable.name }} = {{ variable.name }}
		{% endfor %}
    }
	{% else %}
    public {% if type.annotations.MockBaseClass %}override {% endif %}init() {}
	{% endif %}

    {% for method in type.allMethods|!annotated:"NoMock" %}
    // MARK: - {{ method.annotations.StubName|default:method.callName }}
    {% if not method.shortName == "init" %}public var {{ method.annotations.StubName|default:method.callName }}CallCount = 0{% endif %}
    {% if method.throws %}public var {{ method.annotations.StubName|default:method.callName }}ShouldThrow: Error?{% endif %}
    {% if method.parameters.count > 2 %}// swiftlint:disable:next large_tuple {% endif %}
    {% if method.parameters.count == 1 %}public var {{ method.annotations.StubName|default:method.callName }}Received{% for param in method.parameters %}{{ param.name|upperFirstLetter }}: {{ param.typeName.unwrappedTypeName }}?{% endfor %}{% else %}{% if not method.parameters.count == 0 %}var {{ method.annotations.StubName|default:method.callName }}ReceivedArguments: ({% for param in method.parameters %}{{ param.name }}: {% if param.typeAttributes.escaping %}{{ param.unwrappedTypeName }}{% else %}{{ param.typeName }}{% endif %}{% if not forloop.last %}, {% endif %}{% endfor %})?{% endif %}{% endif %}
    {% if not method.returnTypeName.isVoid and not method.shortName == "init" %}public var {{ method.annotations.StubName|default:method.callName }}ReturnValue: {{ method.returnTypeName }}{% if method.annotations.DefaultReturnValue %} = {{ method.annotations.DefaultReturnValue }}{% else %}!{% endif %}{% endif %}
    public func {{ method.shortName }}({% for param in method.parameters %}{% if param.argumentLabel == nil %}_{% else %}{{ param.argumentLabel }}{% endif %}{% if not param.argumentLabel == param.name %} {{ param.name }}{% endif %}: {{ param.typeName }}{% if not forloop.last %}, {% endif %}{% endfor %}){% if method.throws %} throws{% endif %}{% if not method.returnTypeName.isVoid %} -> {{ method.returnTypeName }}{% endif %} {
        {% if not method.shortName == "init" %}{{ method.annotations.StubName|default:method.callName }}CallCount += 1{% endif %}
        {%if method.parameters.count == 1 %}{{ method.annotations.StubName|default:method.callName }}Received{% for param in method.parameters %}{{ param.name|upperFirstLetter }} = {{ param.name }}{% endfor %}{% else %}{% if not method.parameters.count == 0 %}{{ method.annotations.StubName|default:method.callName }}ReceivedArguments = ({% for param in method.parameters %}{{ param.name }}: {{ param.name }}{% if not forloop.last%}, {% endif %}{% endfor %}){% endif %}{% if not method.returnTypeName.isVoid %}{% endif %}{% endif %}
        {% if method.throws %}if let {{ method.annotations.StubName|default:method.callName }}ShouldThrow = {{ method.annotations.StubName|default:method.callName }}ShouldThrow { throw {{ method.annotations.StubName|default:method.callName }}ShouldThrow }{% endif %}
		{% if not method.returnTypeName.isVoid and not method.shortName == "init" %}return {{ method.annotations.StubName|default:method.callName }}ReturnValue{% endif %}
        
    }

{% endfor %}
}

{% endif %}
{% endfor %}

{% for type in types.classes %}
{% if type.annotations.AutoMockable %}
public class {{ type.name }}Mock: {% if type.annotations.MockBaseClass %}{{ type.annotations.MockBaseClass }}, {% endif %}{{ type.name }} {

    {% for variable in type.allVariables|!annotated:"NoMock" %}
    {% if variable.writeAccess == "public" or variable.writeAccess == "internal" %}
    public var {{ variable.name }}SetCount = 0
    public override var {{ variable.name }}: {{ variable.typeName }}{% if not variable.isOptional %}{% if variable.isArray %} = []{% endif %}{% if variable.isDictionary %} = [:]{% endif %}{% if variable|annotated:"DefaultMockValue" %} = {{ variable.annotations.DefaultMockValue }}{% endif %}{% endif %} {
        didSet { {{ variable.name }}SetCount += 1 }
    }
	{% endif %}
    {% endfor %}
	
	{% if type.annotations.MockInitializerBody %}
    public init() {
        {{ type.annotations.MockInitializerBody }}
    }
	{% endif %}

    {% for method in type.allMethods|!annotated:"NoMock" %}
    {% if not method.shortName == "init" and not method.accessLevel == "private" and not method.accessLevel == "fileprivate" %}
    // MARK: - {{ method.annotations.StubName|default:method.callName }}
	public var {{ method.annotations.StubName|default:method.callName }}CallCount = 0
    {% if method.throws %}public var {{ method.annotations.StubName|default:method.callName }}ShouldThrow: Error?{% endif %}
    {% if method.parameters.count > 2 %}// swiftlint:disable:next large_tuple {% endif %}
    {% if method.parameters.count == 1 %}public var {{ method.annotations.StubName|default:method.callName }}Received{% for param in method.parameters %}{{ param.name|upperFirstLetter }}: {{ param.typeName.unwrappedTypeName }}?{% endfor %}{% else %}{% if not method.parameters.count == 0 %}var {{ method.annotations.StubName|default:method.callName }}ReceivedArguments: ({% for param in method.parameters %}{{ param.name }}: {% if param.typeAttributes.escaping %}{{ param.unwrappedTypeName }}{% else %}{{ param.typeName }}{% endif %}{% if not forloop.last %}, {% endif %}{% endfor %})?{% endif %}{% endif %}
    {% if not method.returnTypeName.isVoid %}public var {{ method.annotations.StubName|default:method.callName }}ReturnValue: {{ method.returnTypeName }}!{% endif %}
    public override func {{ method.annotations.StubName|default:method.callName }}({% for param in method.parameters %}{% if param.argumentLabel == nil %}_{% else %}{{ param.argumentLabel }}{% endif %}{% if not param.argumentLabel == param.name %} {{ param.name }}{% endif %}: {{ param.typeName }}{% if not forloop.last %}, {% endif %}{% endfor %}){% if method.throws %} throws{% endif %}{% if not method.returnTypeName.isVoid %} -> {{ method.returnTypeName }}{% endif %} {
        {{ method.annotations.StubName|default:method.callName }}CallCount += 1
        {%if method.parameters.count == 1 %}{{ method.annotations.StubName|default:method.callName }}Received{% for param in method.parameters %}{{ param.name|upperFirstLetter }} = {{ param.name }}{% endfor %}{% else %}{% if not method.parameters.count == 0 %}{{ method.annotations.StubName|default:method.callName }}ReceivedArguments = ({% for param in method.parameters %}{{ param.name }}: {{ param.name }}{% if not forloop.last%}, {% endif %}{% endfor %}){% endif %}{% if not method.returnTypeName.isVoid %}{% endif %}{% endif %}
        {% if method.throws %}if let {{ method.annotations.StubName|default:method.callName }}ShouldThrow = {{ method.annotations.StubName|default:method.callName }}ShouldThrow { throw {{ method.annotations.StubName|default:method.callName }}ShouldThrow }{% endif %}
		{% if not method.returnTypeName.isVoid %}return {{ method.annotations.StubName|default:method.callName }}ReturnValue{% endif %}
    }
	{% endif %} {# Checking for init and access level #}
{% endfor %}
}

{% endif %}
{% endfor %}
